import customtkinter as ctk
from tkinter import messagebox, filedialog
from random import shuffle, choice
import pyperclip
import json
from datetime import datetime
import csv
from difflib import SequenceMatcher
import threading
import time

class PasswordGenerator:
    def __init__(self):
        self.window = ctk.CTk()
        self.window.title("Password Master Pro")
        self.window.geometry("800x600")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.password_length = ctk.IntVar(value=12)
        self.use_lowercase = ctk.BooleanVar(value=True)
        self.use_uppercase = ctk.BooleanVar(value=True)
        self.use_digits = ctk.BooleanVar(value=True)
        self.use_symbols = ctk.BooleanVar(value=True)
        self.generated_password = ctk.StringVar()
        self.num_passwords = ctk.IntVar(value=1)
        self.category = ctk.StringVar(value="–û–±—â–∏–µ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        self.create_main_layout()
        self.create_profiles_system()
        self.setup_achievements_system()
        self.create_animated_strength_meter()
        self.create_tooltip_system()
        self.create_animated_statistics()
        self.create_template_system()
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.add_visual_effects()
        self.setup_hotkeys()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.level = 0
        self.xp = 0
        self.achievements = {
            "beginner": {"name": "–ù–æ–≤–∏—á–æ–∫", "desc": "–°–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å", "unlocked": False},
            "master": {"name": "–ú–∞—Å—Ç–µ—Ä", "desc": "–°–æ–∑–¥–∞–Ω–æ 100 –ø–∞—Ä–æ–ª–µ–π", "unlocked": False},
            "secure": {"name": "–ó–∞—â–∏—Ç–Ω–∏–∫", "desc": "–°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", "unlocked": False},
            "collector": {"name": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", "desc": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "unlocked": False}
        }

    def create_main_layout(self):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(self.window, height=60)
        header.pack(fill="x", padx=10, pady=5)
        
        logo_label = ctk.CTkLabel(header,
                                 text="üîí Password Master Pro",
                                 font=("Roboto", 24, "bold"))
        logo_label.pack(side="left", padx=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        quick_buttons = ctk.CTkFrame(header)
        quick_buttons.pack(side="right", padx=20)
        
        for icon, command in [
            ("üîÑ", self.generate_multiple_passwords),
            ("üìã", self.copy_password),
            ("üíæ", self.save_password),
            ("üîç", self.analyze_password)
        ]:
            ctk.CTkButton(quick_buttons,
                         text=icon,
                         width=40,
                         command=command).pack(side="left", padx=5)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        self.sidebar = ctk.CTkFrame(self.window, width=200)
        self.sidebar.pack(side="left", fill="y", padx=10, pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.main_content = ctk.CTkTabview(self.window)
        self.main_content.pack(side="right", fill="both", expand=True, padx=10, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_generator = self.main_content.add("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
        self.tab_history = self.main_content.add("–ò—Å—Ç–æ—Ä–∏—è")
        self.tab_settings = self.main_content.add("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        self.create_sidebar()
        self.create_generator_tab()
        self.create_history_tab()
        self.create_settings_tab()
        
    def create_sidebar(self):
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_label = ctk.CTkLabel(self.sidebar, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", font=("Roboto", 16, "bold"))
        stats_label.pack(pady=10)
        
        self.passwords_count = ctk.CTkLabel(self.sidebar, text="–°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä–æ–ª–µ–π: 0")
        self.passwords_count.pack()
        
        self.avg_strength = ctk.CTkLabel(self.sidebar, text="–°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: 0%")
        self.avg_strength.pack()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        ctk.CTkLabel(self.sidebar, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", font=("Roboto", 16, "bold")).pack(pady=(20,10))
        categories = ["–û–±—â–∏–µ", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–ü–æ—á—Ç–∞", "–î—Ä—É–≥–æ–µ"]
        for cat in categories:
            btn = ctk.CTkButton(self.sidebar, text=cat, command=lambda c=cat: self.set_category(c))
            btn.pack(pady=2)
            
    def create_generator_tab(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ctk.CTkFrame(self.tab_generator)
        settings_frame.pack(fill="x", padx=20, pady=10)
        
        # –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è —Å —á–∏—Å–ª–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        length_frame = ctk.CTkFrame(settings_frame)
        length_frame.pack(fill="x", pady=5)
        
        ctk.CTkLabel(length_frame, text="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:").pack(side="left", padx=5)
        self.length_indicator = ctk.CTkLabel(length_frame, text="12")
        self.length_indicator.pack(side="right", padx=5)
        
        length_slider = ctk.CTkSlider(settings_frame, 
                                    from_=8, to=32,
                                    variable=self.password_length,
                                    command=self.update_length_indicator)
        length_slider.pack(fill="x", pady=5)
        
        # –ö–æ–ª–∏—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π
        num_frame = ctk.CTkFrame(settings_frame)
        num_frame.pack(fill="x", pady=5)
        ctk.CTkLabel(num_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π:").pack(side="left", padx=5)
        ctk.CTkEntry(num_frame, textvariable=self.num_passwords, width=50).pack(side="right", padx=5)
        
        # –ß–µ–∫–±–æ–∫—Å—ã –≤ —Å—Ç—Ä–æ–∫—É
        checks_frame = ctk.CTkFrame(settings_frame)
        checks_frame.pack(fill="x", pady=10)
        
        for text, var in [
            ("a-z", self.use_lowercase),
            ("A-Z", self.use_uppercase),
            ("0-9", self.use_digits),
            ("!@#", self.use_symbols)
        ]:
            ctk.CTkCheckBox(checks_frame, text=text, variable=var).pack(side="left", padx=10)
            
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ctk.CTkFrame(self.tab_generator)
        buttons_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkButton(buttons_frame, 
                     text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                     command=self.generate_multiple_passwords,
                     fg_color="green").pack(side="left", padx=5, expand=True)
                     
        ctk.CTkButton(buttons_frame,
                     text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                     command=self.copy_password).pack(side="left", padx=5, expand=True)
                     
        ctk.CTkButton(buttons_frame,
                     text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                     command=self.save_password).pack(side="left", padx=5, expand=True)
        
        ctk.CTkButton(buttons_frame,
                     text="–ê–Ω–∞–ª–∏–∑",
                     command=self.analyze_password).pack(side="left", padx=5, expand=True)
        
        # –ü–ª–µ –≤—ã–≤–¥–∞ –ø–∞—Ä–æ–ª–µ–π
        self.password_text = ctk.CTkTextbox(self.tab_generator, height=200)
        self.password_text.pack(fill="both", padx=20, pady=10, expand=True)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        strength_frame = ctk.CTkFrame(self.tab_generator)
        strength_frame.pack(fill="x", padx=20, pady=10)
        
        self.strength_label = ctk.CTkLabel(strength_frame, text="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ")
        self.strength_label.pack(side="left", padx=5)
        
        self.strength_progress = ctk.CTkProgressBar(strength_frame, width=300)
        self.strength_progress.pack(side="left", padx=5, expand=True)
        self.strength_progress.set(0)

    def create_history_tab(self):
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        top_frame = ctk.CTkFrame(self.tab_history)
        top_frame.pack(fill="x", padx=10, pady=5)
        
        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(top_frame)
        search_frame.pack(side="left", fill="x", expand=True)
        
        self.search_var = ctk.StringVar()
        search_entry = ctk.CTkEntry(search_frame, 
                                   placeholder_text="–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏...",
                                   textvariable=self.search_var)
        search_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        ctk.CTkButton(search_frame,
                     text="üîç",
                     width=30,
                     command=lambda: self.search_history(self.search_var.get())).pack(side="left", padx=5)
        
        # –§–∏–ª—å—Ç—Ä—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç
        filter_frame = ctk.CTkFrame(top_frame)
        filter_frame.pack(side="right", padx=5)
        
        self.filter_var = ctk.StringVar(value="–í—Å–µ")
        ctk.CTkComboBox(filter_frame,
                        values=["–í—Å–µ", "–°–∏–ª—å–Ω—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–∞–±—ã–µ"],
                        variable=self.filter_var,
                        command=self.filter_history).pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –µ—Å—Ç–≤–∏–π
        actions_frame = ctk.CTkFrame(self.tab_history)
        actions_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkButton(actions_frame,
                     text="–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON",
                     command=lambda: self.export_passwords("json")).pack(side="left", padx=5)
        
        ctk.CTkButton(actions_frame,
                     text="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                     command=lambda: self.export_passwords("csv")).pack(side="left", padx=5)
        
        ctk.CTkButton(actions_frame,
                     text="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                     fg_color="red",
                     command=self.clear_history).pack(side="right", padx=5)
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        history_frame = ctk.CTkFrame(self.tab_history)
        history_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.history_text = ctk.CTkTextbox(history_frame)
        self.history_text.pack(fill="both", expand=True)

    def create_settings_tab(self):
        settings_frame = ctk.CTkFrame(self.tab_settings)
        settings_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ctk.CTkLabel(settings_frame, 
                    text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    font=("Roboto", 16, "bold")).pack(pady=10)
        
        # –í—ã–±–æ—Ä —Ç–µ–º—ã
        theme_frame = ctk.CTkFrame(settings_frame)
        theme_frame.pack(fill="x", pady=5)
        ctk.CTkLabel(theme_frame, text="–¢–µ–º–∞:").pack(side="left", padx=5)
        ctk.CTkComboBox(theme_frame,
                       values=["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"],
                       command=self.change_theme).pack(side="left", padx=5)
        
        # –ü—É—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        path_frame = ctk.CTkFrame(settings_frame)
        path_frame.pack(fill="x", pady=5)
        ctk.CTkLabel(path_frame, text="–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").pack(side="left", padx=5)
        ctk.CTkButton(path_frame,
                     text="–í—ã–±—Ä–∞—Ç—å",
                     command=self.choose_save_path).pack(side="right", padx=5)

    def create_profiles_system(self):
        profiles_frame = ctk.CTkFrame(self.tab_settings)
        profiles_frame.pack(fill="x", pady=10, padx=5)
        
        ctk.CTkLabel(profiles_frame, 
                     text="–ü—Ä–æ—Ñ–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                     font=("Roboto", 16, "bold")).pack(pady=5)
        
        self.profiles = {
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {"length": 12, "lowercase": True, "uppercase": True, 
                           "digits": True, "symbols": True},
            "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã": {"length": 8, "lowercase": False, "uppercase": False, 
                              "digits": True, "symbols": False},
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞": {"length": 32, "lowercase": True, "uppercase": True,
                                   "digits": True, "symbols": True}
        }
        
        for name, settings in self.profiles.items():
            profile_btn = ctk.CTkButton(profiles_frame,
                                      text=name,
                                      command=lambda s=settings: self.apply_profile(s))
            profile_btn.pack(pady=2)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def update_length_indicator(self, value):
        self.length_indicator.configure(text=str(int(float(value))))
        
    def generate_multiple_passwords(self):
        num = self.num_passwords.get()
        if num == 1:
            self.animate_password_generation()
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä–æ–ª–µ–π
            passwords = []
            for _ in range(num):
                password = self.generate_single_password()
                if password:
                    passwords.append(password)
            
            self.password_text.delete("1.0", "end")
            self.password_text.insert("1.0", "\n".join(passwords))
        
        self.update_statistics()

    def generate_single_password(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–±—Ä–∞–Ω
        if not any([
            self.use_lowercase.get(),
            self.use_uppercase.get(),
            self.use_digits.get(),
            self.use_symbols.get()
        ]):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤")
            return None

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
        chars = ''
        if self.use_lowercase.get():
            chars += 'abcdefghijklmnopqrstuvwxyz'
        if self.use_uppercase.get():
            chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        if self.use_digits.get():
            chars += '0123456789'
        if self.use_symbols.get():
            chars += '!@#$%^&*()_+-=[]{}|;:,.<>?'

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        length = self.password_length.get()
        password_chars = [choice(chars) for _ in range(length)]
        shuffle(password_chars)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        password = ''.join(password_chars)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        strength = self.calculate_password_strength(password)
        self.animate_strength(strength)
        self.strength_progress.set(strength)
        self.strength_label.configure(text=f"–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {int(strength * 100)}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.check_achievements(password)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        self.add_xp(10 + int(strength * 20))  # –û—Ç 10 –¥–æ 30 XP –∑–∞ –ø–∞—Ä–æ–ª—å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_statistics()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º –ø–∞—Ä–æ–ª–µ
        if strength > 0.8:
            self.show_notification("–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å!", 
                                 "–°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
        
        return password
        
    def export_passwords(self, format):
        history_text = self.history_text.get("1.0", "end-1c")
        if not history_text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=f".{format}",
            filetypes=[(f"{format.upper()} files", f"*.{format}")]
        )
        
        if file_path:
            try:
                if format == "json":
                    history = []
                    for line in history_text.split('\n'):
                        if line:
                            date, rest = line.split(" - ", 1)
                            password, category = rest.rsplit(": ", 1)
                            history.append({
                                "date": date,
                                "password": password,
                                "category": category,
                                "strength": self.calculate_password_strength(password)
                            })
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(history, f, indent=4, ensure_ascii=False)
                        
                elif format == "csv":
                    with open(file_path, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.writer(f)
                        writer.writerow(["–î–∞—Ç–∞", "–ü–∞—Ä–æ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å"])
                        for line in history_text.split('\n'):
                            if line:
                                date, rest = line.split(" - ", 1)
                                password, category = rest.rsplit(": ", 1)
                                writer.writerow([
                                    date, password, category,
                                    f"{int(self.calculate_password_strength(password) * 100)}%"
                                ])
                
                self.show_notification("–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", 
                                    f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")

    def change_theme(self, theme):
        theme_map = {
            "–¢–µ–º–Ω–∞—è": "dark",
            "–°–≤–µ—Ç–ª–∞—è": "light",
            "–°–∏—Å—Ç–µ–º–Ω–∞—è": "system"
        }
        ctk.set_appearance_mode(theme_map[theme])
        
    def choose_save_path(self):
        path = filedialog.askdirectory()
        if path:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            pass

    def copy_password(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        password = self.password_text.get("1.0", "end-1c")
        if password:
            pyperclip.copy(password)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def save_password(self):
        password = self.password_text.get("1.0", "end-1c")
        if not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–µ—É—â–µ–π –¥–∞—Ç–æ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        password_entry = {
            "password": password,
            "category": self.category.get(),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history_text.insert("end", f"{password_entry['date']} - {password}: {password_entry['category']}\n")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")

    def set_category(self, category):
        self.category.set(category)
        messagebox.showinfo("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ—Ä–∏—è: {category}")

    def calculate_password_strength(self, password):
        score = 0
        
        # –î–ª–∏–∞ –ø–∞—Ä–æ–ª—è
        if len(password) >= 12:
            score += 0.25
        elif len(password) >= 8:
            score += 0.15
            
        # –ù–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        if any(c.islower() for c in password):
            score += 0.15
        if any(c.isupper() for c in password):
            score += 0.15
        if any(c.isdigit() for c in password):
            score += 0.2
        if any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in password):
            score += 0.25
            
        return min(score, 1.0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1.0

    def animate_password_generation(self):
        self.password_text.delete("1.0", "end")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        chars = "‚£æ‚£Ω‚£ª‚¢ø‚°ø‚£ü‚£Ø‚£∑"
        def loading_animation(i=0):
            if i < 10:  # 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∏–º–∞—Ü–∏–∏
                self.password_text.delete("1.0", "end")
                self.password_text.insert("1.0", f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è {chars[i % len(chars)]}")
                self.window.after(100, lambda: loading_animation(i + 1))
            else:
                password = self.generate_single_password()
                if password:
                    self.type_effect(password)
        
        loading_animation()

    def update_statistics(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª–µ–π
        current_count = int(self.passwords_count.cget("text").split(": ")[1])
        self.passwords_count.configure(text=f"–°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä–æ–ª–µ–π: {current_count + 1}")
        
        # –û–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        password = self.password_text.get("1.0", "end-1c")
        strength = self.calculate_password_strength(password)
        current_avg = float(self.avg_strength.cget("text").split(": ")[1].strip("%")) / 100
        new_avg = (current_avg * current_count + strength) / (current_count + 1)
        self.avg_strength.configure(text=f"–°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {int(new_avg * 100)}%")

    def analyze_password(self):
        password = self.password_text.get("1.0", "end-1c")
        if not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        analysis = []
        # –ü—Ä–æ–µ–∫–∞ –¥–ª–∏–Ω—ã
        if len(password) < 8:
            analysis.append("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä–æ–ª—å")
        elif len(password) >= 12:
            analysis.append("‚úÖ –•–æ—Ä–æ—à–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        if any(c.islower() for c in password):
            analysis.append("‚úÖ –ï—Å—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
        if any(c.isupper() for c in password):
            analysis.append("‚úÖ –ï—Å—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        if any(c.isdigit() for c in password):
            analysis.append("‚úÖ –ï—Å—Ç—å —Ü–∏—Ñ—Ä—ã")
        if any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in password):
            analysis.append("‚úÖ –ï—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è", "\n".join(analysis))

    def auto_save_passwords(self):
        try:
            with open('password_history.json', 'r') as f:
                history = json.load(f)
        except FileNotFoundError:
            history = []
        
        password_entry = {
            "password": self.password_text.get("1.0", "end-1c"),
            "category": self.category.get(),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "strength": self.calculate_password_strength(self.password_text.get("1.0", "end-1c"))
        }
        
        history.append(password_entry)
        
        with open('password_history.json', 'w') as f:
            json.dump(history, f, indent=4)

    def run(self):
        self.window.mainloop()

    def search_history(self, query):
        history_text = self.history_text.get("1.0", "end-1c")
        results = []
        
        for line in history_text.split('\n'):
            if query.lower() in line.lower():
                results.append(line)
                
        self.history_text.delete("1.0", "end")
        self.history_text.insert("1.0", "\n".join(results))

    def check_password_leaks(self):
        password = self.password_text.get("1.0", "end-1c")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ API
        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫", 
                           "–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–∞—Ö —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")

    def filter_history(self, filter_value):
        history_text = self.history_text.get("1.0", "end-1c")
        filtered_results = []
        
        for line in history_text.split('\n'):
            if filter_value == "–í—Å–µ":
                filtered_results.append(line)
            elif filter_value == "–°–∏–ª—å–Ω—ã–µ" and "strength': 0.8" in line:
                filtered_results.append(line)
            elif filter_value == "–°—Ä–µ–¥–Ω–∏–µ" and "strength': 0.5" in line:
                filtered_results.append(line)
            elif filter_value == "–°–ª–∞–±—ã–µ" and "strength': 0.3" in line:
                filtered_results.append(line)
        
        self.history_text.delete("1.0", "end")
        self.history_text.insert("1.0", "\n".join(filtered_results))

    def clear_history(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?"):
            self.history_text.delete("1.0", "end")
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                with open('password_history.json', 'w') as f:
                    json.dump([], f)
            except FileNotFoundError:
                pass
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")

    def type_effect(self, password, index=0):
        if index < len(password):
            self.password_text.delete("1.0", "end")
            self.password_text.insert("1.0", password[:index+1])
            self.window.after(50, lambda: self.type_effect(password, index+1))
        else:
            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics()

    def add_visual_effects(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        self.window.configure(fg_color=["#1a1a1a", "#2d2d2d"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
        for frame in [self.sidebar, self.tab_generator, self.tab_history, self.tab_settings]:
            frame.configure(corner_radius=10, border_width=2, border_color="#3f3f3f")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        def on_enter(e):
            e.widget.configure(fg_color=["#2ecc71", "#27ae60"])
        def on_leave(e):
            e.widget.configure(fg_color=["#3498db", "#2980b9"])
        
        for button in self.window.winfo_children():
            if isinstance(button, ctk.CTkButton):
                button.bind("<Enter>", on_enter)
                button.bind("<Leave>", on_leave)

    def setup_hotkeys(self):
        self.window.bind("<Control-g>", lambda e: self.generate_multiple_passwords())
        self.window.bind("<Control-c>", lambda e: self.copy_password())
        self.window.bind("<Control-s>", lambda e: self.save_password())
        self.window.bind("<Control-a>", lambda e: self.analyze_password())
        self.window.bind("<Control-f>", lambda e: self.search_var.focus_set())

    def show_notification(self, title, message, duration=3000):
        notification_window = ctk.CTkToplevel(self.window)
        notification_window.geometry("300x100+{}+{}".format(
            self.window.winfo_x() + self.window.winfo_width() - 320,
            self.window.winfo_y() + 20
        ))
        notification_window.title("")
        notification_window.overrideredirect(True)
        
        ctk.CTkLabel(notification_window, 
                     text=title,
                     font=("Roboto", 14, "bold")).pack(pady=5)
        ctk.CTkLabel(notification_window, 
                     text=message).pack(pady=5)
        
        notification_window.lift()
        self.window.after(duration, notification_window.destroy)

    def create_statistics_visualization(self):
        stats_frame = ctk.CTkFrame(self.tab_history)
        stats_frame.pack(fill="x", pady=10, padx=5)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.pie_canvas = ctk.CTkCanvas(stats_frame, height=200, bg="#2d2d2d")
        self.pie_canvas.pack(side="left", fill="both", expand=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.trend_canvas = ctk.CTkCanvas(stats_frame, height=200, bg="#2d2d2d")
        self.trend_canvas.pack(side="right", fill="both", expand=True)
        
        def update_statistics():
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            categories = {}
            history_text = self.history_text.get("1.0", "end-1c")
            for line in history_text.split('\n'):
                if line:
                    category = line.split(": ")[-1]
                    categories[category] = categories.get(category, 0) + 1
                    
            # –û—Ä–∏—Å–æ–≤–∫–∞ –¥–∏–∞—Ä–∞–º–º—ã...
            
            self.window.after(5000, update_statistics)
        
        update_statistics()

    def apply_profile(self, settings):
        self.password_length.set(settings["length"])
        self.use_lowercase.set(settings["lowercase"])
        self.use_uppercase.set(settings["uppercase"])
        self.use_digits.set(settings["digits"])
        self.use_symbols.set(settings["symbols"])
        
        self.update_length_indicator(settings["length"])
        self.show_notification("–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω", 
                             f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–ª–∏–Ω–æ–π {settings['length']}")

    def setup_achievements(self):
        self.achievements = {
            "beginner": {"name": "–ù–æ–≤–∏—á–æ–∫", "desc": "–°–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å", "unlocked": False},
            "master": {"name": "–ú–∞—Å—Ç–µ—Ä", "desc": "–°–æ–∑–¥–∞–Ω–æ 100 –ø–∞—Ä–æ–ª–µ–π", "unlocked": False},
            "secure": {"name": "–ó–∞—â–∏—Ç–Ω–∏–∫", "desc": "–°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", "unlocked": False},
            "collector": {"name": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", "desc": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "unlocked": False}
        }
        
    def check_achievements(self, password=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if not self.achievements["beginner"]["unlocked"]:
            self.unlock_achievement("beginner")
                
        current_count = int(self.passwords_count.cget("text").split(": ")[1])
        if current_count >= 100 and not self.achievements["master"]["unlocked"]:
            self.unlock_achievement("master")
                
        if password and self.calculate_password_strength(password) == 1.0:
            if not self.achievements["secure"]["unlocked"]:
                self.unlock_achievement("secure")

    def create_tooltip_system(self):
        class AnimatedTooltip:
            def __init__(self, widget, text):
                self.widget = widget
                self.text = text
                self.tooltip = None
                self.alpha = 0.0
                self.widget.bind("<Enter>", self.show)
                self.widget.bind("<Leave>", self.hide)
            
            def show(self, event=None):
                x = self.widget.winfo_rootx() + self.widget.winfo_width() + 10
                y = self.widget.winfo_rooty() + self.widget.winfo_height() // 2
                
                self.tooltip = ctk.CTkToplevel(self.widget)
                self.tooltip.wm_overrideredirect(True)
                self.tooltip.wm_geometry(f"+{x}+{y}")
                self.tooltip.attributes('-alpha', 0.0)
                
                frame = ctk.CTkFrame(self.tooltip, fg_color="#2d2d2d")
                frame.pack(padx=5, pady=5)
                
                label = ctk.CTkLabel(frame, text=self.text)
                label.pack()
                
                def fade_in():
                    if self.tooltip and self.alpha < 1.0:
                        self.alpha += 0.1
                        self.tooltip.attributes('-alpha', self.alpha)
                        self.tooltip.after(20, fade_in)
                
                fade_in()
            
            def hide(self, event=None):
                def fade_out():
                    if self.tooltip and self.alpha > 0.0:
                        self.alpha -= 0.1
                        self.tooltip.attributes('-alpha', self.alpha)
                        if self.alpha <= 0:
                            self.tooltip.destroy()
                            self.tooltip = None
                        else:
                            self.tooltip.after(20, fade_out)
                
                if self.tooltip:
                    fade_out()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        tooltips = [
            (self.strength_progress, "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"),
            (self.password_text, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"),
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö –ø–æ—Å–∫–∞–∑–∫–∏
        ]
        
        for widget, text in tooltips:
            AnimatedTooltip(widget, text)

    def apply_template(self, template):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
        if "#" in template:
            result = ""
            for char in template:
                if char == "#":
                    result += choice("0123456789")
                elif char == "w":
                    result += choice("abcdefghijklmnopqrstuvwxyz")
                elif char == "W":
                    result += choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                else:
                    result += char
            return result
        return template

    def create_template_system(self):
        template_frame = ctk.CTkFrame(self.tab_settings)
        template_frame.pack(fill="x", pady=10, padx=5)
        
        ctk.CTkLabel(template_frame,
                    text="–®–∞–±–ª–æ–Ω—ã –ø–∞—Ä–æ–ª–µ–π",
                    font=("Roboto", 16, "bold")).pack(pady=5)
        
        self.templates = {
            "PIN": "####",
            "–°–ª–æ–≤–æ + –ß–∏—Å–ª–æ": "word####",
            "–°–ª–æ–∂–Ω—ã–π": "Word####!@",
            "–û—Å–æ–±—ã–π": "W####w!@"
        }
        
        for name, pattern in self.templates.items():
            frame = ctk.CTkFrame(template_frame)
            frame.pack(fill="x", pady=2)
            ctk.CTkLabel(frame, text=name).pack(side="left", padx=5)
            ctk.CTkLabel(frame, text=pattern).pack(side="left", padx=5)
            ctk.CTkButton(frame,
                         text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                         command=lambda p=pattern: self.apply_template(p)).pack(side="right", padx=5)

    def setup_achievements_system(self):
        self.level = 0
        self.xp = 0
        self.achievements_frame = ctk.CTkFrame(self.sidebar)
        self.achievements_frame.pack(fill="x", pady=10, padx=5)
        
        self.level_label = ctk.CTkLabel(self.achievements_frame, 
                                       text="–£—Ä–æ–≤–µ–Ω—å: 0",
                                       font=("Roboto", 14, "bold"))
        self.level_label.pack()
        
        self.xp_progress = ctk.CTkProgressBar(self.achievements_frame, width=150)
        self.xp_progress.pack(pady=5)
        self.xp_progress.set(0)
        
        def add_xp(amount):
            self.xp += amount
            level_threshold = (self.level + 1) * 100
            if self.xp >= level_threshold:
                self.level += 1
                self.xp = self.xp - level_threshold
                self.level_label.configure(text=f"–£—Ä–æ–≤–µ–Ω—å: {self.level}")
                self.show_notification("–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!", f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å {self.level}")
            
            self.xp_progress.set(self.xp / level_threshold)
        
        self.add_xp = add_xp

    def create_animated_strength_meter(self):
        strength_frame = ctk.CTkFrame(self.tab_generator)
        strength_frame.pack(fill="x", padx=20, pady=10)
        
        self.strength_canvas = ctk.CTkCanvas(strength_frame, height=40, bg="#2d2d2d")
        self.strength_canvas.pack(fill="x", pady=5)
        
        def animate_strength(strength):
            """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
            colors = ["#ff0000", "#ff7f00", "#ffff00", "#00ff00"]
            segments = 20
            width = self.strength_canvas.winfo_width()
            
            def animate_frame(current=0):
                if current <= strength * segments:
                    self.strength_canvas.delete("all")
                    segment_width = width / segments
                    
                    for i in range(int(current)):
                        x1 = i * segment_width
                        x2 = (i + 1) * segment_width
                        color_index = min(3, i // (segments // 4))
                        
                        self.strength_canvas.create_rectangle(
                            x1, 5, x2-2, 35,
                            fill=colors[color_index],
                            width=0
                        )
                    
                    self.window.after(50, lambda: animate_frame(current + 0.5))
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.animate_strength = animate_strength
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω—É–ª–µ–≤–æ–π —Å–∏–ª–æ–π –ø–∞—Ä–æ–ª—è
        self.animate_strength(0)

    def create_template_preview(self):
        preview_frame = ctk.CTkFrame(self.tab_generator)
        preview_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(preview_frame, 
                    text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞",
                    font=("Roboto", 14, "bold")).pack()
        
        self.preview_text = ctk.CTkTextbox(preview_frame, height=60)
        self.preview_text.pack(fill="x", pady=5)
        
        def update_preview(template):
            previews = []
            for _ in range(3):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
                result = self.apply_template(template)
                previews.append(result)
            
            self.preview_text.delete("1.0", "end")
            self.preview_text.insert("1.0", "\n".join(previews))
        
        self.update_template_preview = update_preview

    def create_animated_statistics(self):
        stats_frame = ctk.CTkFrame(self.tab_history)
        stats_frame.pack(fill="x", pady=10, padx=5)
        
        self.stats_canvas = ctk.CTkCanvas(stats_frame, height=200, bg="#2d2d2d")
        self.stats_canvas.pack(fill="x", pady=5)
        
        def animate_stats():
            data = self.get_password_statistics()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            
            def animate_bar(index=0, height=0):
                if index < len(data):
                    target_height = data[index] * 150
                    if height < target_height:
                        self.stats_canvas.delete(f"bar_{index}")
                        self.stats_canvas.create_rectangle(
                            index * 30 + 10, 180 - height,
                            (index + 1) * 30, 180,
                            fill="#2ecc71",
                            tags=f"bar_{index}"
                        )
                        self.window.after(16, lambda: animate_bar(index, height + 5))
                    else:
                        self.window.after(100, lambda: animate_bar(index + 1))
            
            animate_bar()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã 5 —Å–µ–∫—É–Ω–¥
        def update():
            animate_stats()
            self.window.after(5000, update)
        
        update()

    def get_password_statistics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        history_text = self.history_text.get("1.0", "end-1c")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä: [–ø—Ä–æ—Ü–µ–Ω—Ç —Å–∏–ª—å–Ω—ã—Ö, –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ä–µ–¥–Ω–∏—Ö, –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ª–∞–±—ã—Ö –ø–∞—Ä–æ–ª–µ–π]
        stats = [0, 0, 0]
        total = 0
        
        for line in history_text.split('\n'):
            if line:
                password = line.split(" - ")[1].split(": ")[0]
                strength = self.calculate_password_strength(password)
                total += 1
                
                if strength >= 0.8:
                    stats[0] += 1
                elif strength >= 0.5:
                    stats[1] += 1
                else:
                    stats[2] += 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if total > 0:
            stats = [count / total for count in stats]
        
        return stats

    def unlock_achievement(self, achievement_id):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if achievement_id in self.achievements and not self.achievements[achievement_id]["unlocked"]:
            self.achievements[achievement_id]["unlocked"] = True
            achievement = self.achievements[achievement_id]
            self.show_notification(
                f"üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement['name']}", 
                achievement['desc']
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            self.add_xp(50)  # –ë–æ–Ω—É—Å 50 XP –∑–∞ –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ

if __name__ == "__main__":
    app = PasswordGenerator()
    app.run()
